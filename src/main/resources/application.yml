server:
  port: 8080
  servlet:
    context-path: /
    encoding:
      charset: UTF-8
      enabled: true
      force: true

spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/springSecurity?serverTimezone=Asia/Seoul
    username: test
    password: yeong1234

  jpa:
    hibernate:
      ddl-auto: create
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

    properties:
      hibernate:
        format_sql: true


  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 374299965772-1cbitap95r8n22pj959704p6fh8are20.apps.googleusercontent.com
            clientSecret: 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
            scope:
              - email
              - profile

          facebook:
            clientId: 354831073067328
            clientSecret: 451e7067725f22c684262c91ed9cf897
            scope:
              - email
              - public_profile

          naver:
            clientId: izo4ufSMKim0UHIG_aP4
            clientSecret: s1dV8hBDhE
            scope:
              - name
              - email
#              - profile-image
            clientName: Naver
            authorizationGrantType: authorization_code
            redirectUri: http://localhost:8080/login/oauth2/code/naver

        provider: # 네이버는 Provider에 등록되어 있지 않기 때문에 직접 등록한다.
          naver: # 설정 정보는 네이버 개발 문서에 나와있다.
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            tokenUri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response # 회원 정보를 json으로 받는데 response라는 키 값으로 네이버가 리턴해준다.




logging:
  level:
    org.hibernate.SQL: debug

